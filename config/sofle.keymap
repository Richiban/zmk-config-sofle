/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/ext_power.h>

/ {
    combos {
        compatible = "zmk,combos";

        Undo {
            bindings = <&kp LG(Z)>;
            key-positions = <15 14>;
            layers = <0 1>;
        };

        Backspace {
            bindings = <&kp LA(BACKSPACE)>;
            key-positions = <20 21>;
            layers = <0 1>;
        };

        Undo_windows {
            bindings = <&kp LC(Z)>;
            key-positions = <14 15>;
            layers = <2 3>;
        };

        Backspace_word_windows {
            bindings = <&kp LC(BACKSPACE)>;
            key-positions = <20 21>;
            layers = <2 3>;
        };

        Lock {
            bindings = <&tog 5>;
            key-positions = <0 50 59 11>;
        };
    };

    behaviors {
        mo_tog: behavior_mo_tog {
            compatible = "zmk,behavior-hold-tap";
            label = "mo_tog";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <200>;
            bindings =
                <&mo>,
                <&tog>;
        };
        lh: behavior_layer_hold {
            compatible = "zmk,behavior-hold-tap";
            label = "layer_hold_tap";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <200>;
            bindings =
                <&mo>,
                <&kp>;
        };
        sh_sp: behavior_shifted_key {
            compatible = "zmk,behavior-mod-morph";
            label = "SHIFTED_KEY";
            #binding-cells = <0>;
            bindings =
                <&kp SPACE>,
                <&kp UNDERSCORE>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        skq: sticky_key_quick_release {
            compatible = "zmk,behavior-sticky-key";
            label = "STICKY_KEY_QUICK_RELEASE";
            #binding-cells = <1>;
            bindings = <&kp>;
            release-after-ms = <1000>;
            quick-release;
        };
        gqt: global-quick-tap {
            compatible = "zmk,behavior-hold-tap";
            label = "GLOBAL_QUICK_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <125>;
            global-quick-tap;
            bindings =
                <&kp>,
                <&kp>;
        };
    };

    macros {
        gbp: gbp {
            label = "GBP";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <40>;
            tap-ms = <40>;
            bindings =
                <&macro_press>,
                <&kp LALT>,
                <&macro_tap>,
                <&kp KP_N0 &kp KP_N1 &kp KP_N6 &kp KP_N3>,
                <&macro_release>,
                <&kp LALT>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        mac_default_layer {
            bindings = <
                            &kp ESC  &kp N1      &kp N2             &kp N3      &kp N4       &kp N5                             &kp N6         &kp N7     &kp N8         &kp N9         &kp N0                          &kp F11
                            &kp TAB   &kp Q       &kp W              &kp F       &kp P        &kp G                              &kp J          &kp L      &kp U          &kp Y  &kp SEMICOLON                          &kp F12
 &gqt LEFT_CONTROL LEFT_PARENTHESIS   &kp A       &kp R              &kp S       &kp T        &kp D                              &kp H          &kp N      &kp E          &kp I          &kp O  &gqt RIGHT_CONTROL SINGLE_QUOTE
            &mt LEFT_ALT LEFT_BRACE   &kp Z       &kp X              &kp C       &kp V        &kp B    &kt LSHIFT   &kp K_MUTE   &kp K          &kp M  &kp COMMA        &kp DOT       &kp FSLH          &mt RIGHT_ALT BACKSLASH
                                             &kp K_BACK  &kp K_APPLICATION  &kp DELETE  &skq LSHIFT  &kp LEFT_GUI  &lh 1 ENTER  &sh_sp  &kp BACKSPACE      &mo 4  &kp K_FORWARD
            >;

            sensor-bindings = <&inc_dec_kp UP DOWN &inc_dec_kp LA(LEFT) LA(RIGHT)>;
        };

        mac_command_layer {
            bindings = <
                         &kp C_POWER     &kp F1            &kp F2     &kp F3             &kp F4     &kp F5                        &kp F6       &kp F7     &kp F8         &kp F9        &kp F10  &kp F11
                              &trans       &gbp          &kp PIPE  &kp EQUAL     &kp UNDERSCORE     &trans                        &trans     &kp HOME     &kp UP        &kp END         &trans  &kp F12
 &gqt LEFT_CONTROL RIGHT_PARENTHESIS  &kp TILDE     &kp LESS_THAN  &kp MINUS   &kp GREATER_THAN  &kp GRAVE                  &kp LA(LEFT)     &kp LEFT   &kp DOWN      &kp RIGHT  &kp RA(RIGHT)   &trans
            &mt LEFT_ALT RIGHT_BRACE     &trans  &kp LEFT_BRACKET   &kp PLUS  &kp RIGHT_BRACKET     &trans  &trans  &trans   &bootloader  &kp PAGE_UP  &kp ENTER  &kp PAGE_DOWN         &trans   &trans
                                                           &trans     &trans             &trans     &trans  &trans  &trans        &trans       &trans     &trans         &tog 2
            >;

            sensor-bindings = <&inc_dec_kp LA(LEFT) LA(RIGHT) &inc_dec_kp PG_UP PG_DN>;
        };

        windows_default_layer {
            bindings = <
                        &kp ESC  &kp N1  &kp N2             &kp N3      &kp N4       &kp N5                                 &kp N6         &kp N7     &kp N8   &kp N9         &kp N0                      &kp F11
                        &kp TAB   &kp Q   &kp W              &kp F       &kp P        &kp G                                  &kp J          &kp L      &kp U    &kp Y  &kp SEMICOLON                      &kp F12
 &gqt LEFT_GUI LEFT_PARENTHESIS   &kp A   &kp R              &kp S       &kp T        &kp D                                  &kp H          &kp N      &kp E    &kp I          &kp O  &gqt RIGHT_GUI SINGLE_QUOTE
        &mt LEFT_ALT LEFT_BRACE   &kp Z   &kp X              &kp C       &kp V        &kp B        &kt LSHIFT   &kp K_MUTE   &kp K          &kp M  &kp COMMA  &kp DOT       &kp FSLH      &mt RIGHT_ALT BACKSLASH
                                         &trans  &kp K_APPLICATION  &kp DELETE  &skq LSHIFT  &kp LEFT_CONTROL  &lh 3 ENTER  &sh_sp  &kp BACKSPACE      &mo 4   &trans
            >;

            sensor-bindings = <&inc_dec_kp UP DOWN &inc_dec_kp LC(LEFT) LC(RIGHT)>;
        };

        windows_command_layer {
            bindings = <
                     &kp C_POWER     &kp F1            &kp F2     &kp F3             &kp F4     &kp F5                        &kp F6       &kp F7     &kp F8         &kp F9        &kp F10  &kp F11
                          &trans       &gbp          &kp PIPE  &kp EQUAL     &kp UNDERSCORE     &trans                        &trans     &kp HOME     &kp UP        &kp END         &trans  &kp F12
 &gqt LEFT_GUI RIGHT_PARENTHESIS  &kp TILDE     &kp LESS_THAN  &kp MINUS   &kp GREATER_THAN  &kp GRAVE                  &kp LC(LEFT)     &kp LEFT   &kp DOWN      &kp RIGHT  &kp LC(RIGHT)   &trans
        &mt LEFT_ALT RIGHT_BRACE     &trans  &kp LEFT_BRACKET   &kp PLUS  &kp RIGHT_BRACKET     &trans  &trans  &trans   &bootloader  &kp PAGE_UP  &kp ENTER  &kp PAGE_DOWN         &trans   &trans
                                                       &trans     &trans             &trans     &trans  &trans  &trans        &trans       &trans     &trans         &tog 0
            >;

            sensor-bindings = <&inc_dec_kp LC(LEFT) LC(RIGHT) &inc_dec_kp PG_UP PG_DN>;
        };

        function_layer {
            bindings = <
 &trans  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4                  &trans  &trans  &trans  &trans  &trans  &trans
 &trans        &trans        &trans        &trans        &trans        &trans                  &trans  &trans  &trans  &trans  &trans  &trans
 &trans        &trans        &trans        &trans        &trans        &trans                  &trans  &trans  &trans  &trans  &trans  &trans
 &trans        &trans        &trans        &trans        &trans        &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
                             &trans        &trans        &trans        &trans  &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };

        lock_layer {
            bindings = <
 &none  &none  &none  &none  &none  &none                  &none  &none  &none  &none  &none  &none
 &none  &none  &none  &none  &none  &none                  &none  &none  &none  &none  &none  &none
 &none  &none  &none  &none  &none  &none                  &none  &none  &none  &none  &none  &none
 &none  &none  &none  &none  &none  &none  &none  &none  &none  &none  &none  &none  &none  &none
                 &none  &none  &none  &none  &none  &none  &none  &none  &none  &none
            >;
        };
    };
};
